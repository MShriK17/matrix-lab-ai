"""
Exploratory Data Analysis Module for MatrixLab AI Studio
Generates comprehensive EDA reports and visualizations
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from typing import Optional, Dict, Any
import warnings
warnings.filterwarnings('ignore')

class EDAGenerator:
    """Handles automated EDA report generation and visualizations"""
    
    def __init__(self):
        self.color_palette = px.colors.qualitative.Set3
    
    def generate_profile_report(self, df: pd.DataFrame) -> str:
        """Generate comprehensive EDA report using ydata-profiling"""
        try:
            # Try to use ydata-profiling if available
            try:
                from ydata_profiling import ProfileReport
                
                profile = ProfileReport(
                    df,
                    title="MatrixLab AI Studio - EDA Report",
                    explorative=True,
                    dark_mode=False
                )
                
                return profile.to_html()
                
            except ImportError:
                # Fallback to manual EDA report
                return self._generate_manual_report(df)
                
        except Exception as e:
            st.error(f"Error generating EDA report: {str(e)}")
            return self._generate_manual_report(df)
    
    def _generate_manual_report(self, df: pd.DataFrame) -> str:
        """Generate manual EDA report as HTML"""
        html_content = f"""
        <html>
        <head>
            <title>MatrixLab AI Studio - EDA Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #4F46E5; color: white; padding: 20px; text-align: center; }}
                .section {{ margin: 20px 0; padding: 15px; border-left: 4px solid #4F46E5; }}
                .metric {{ display: inline-block; margin: 10px; padding: 10px; background: #F3F4F6; border-radius: 5px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #F3F4F6; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä EDA Report</h1>
                <p>Generated by MatrixLab AI Studio</p>
            </div>
            
            <div class="section">
                <h2>üìã Dataset Overview</h2>
                <div class="metric">
                    <strong>Rows:</strong> {df.shape[0]:,}
                </div>
                <div class="metric">
                    <strong>Columns:</strong> {df.shape[1]:,}
                </div>
                <div class="metric">
                    <strong>Missing Values:</strong> {df.isnull().sum().sum():,}
                </div>
                <div class="metric">
                    <strong>Duplicates:</strong> {df.duplicated().sum():,}
                </div>
            </div>
            
            <div class="section">
                <h2>üîç Column Details</h2>
                <table>
                    <tr>
                        <th>Column</th>
                        <th>Data Type</th>
                        <th>Non-Null Count</th>
                        <th>Unique Values</th>
                        <th>Missing %</th>
                    </tr>
        """
        
        for col in df.columns:
            missing_pct = (df[col].isnull().sum() / len(df)) * 100
            html_content += f"""
                    <tr>
                        <td>{col}</td>
                        <td>{df[col].dtype}</td>
                        <td>{df[col].count():,}</td>
                        <td>{df[col].nunique():,}</td>
                        <td>{missing_pct:.1f}%</td>
                    </tr>
            """
        
        html_content += """
                </table>
            </div>
            
            <div class="section">
                <h2>üìà Numerical Summary</h2>
                <p>Statistical summary for numerical columns:</p>
        """
        
        # Add numerical summary
        numeric_df = df.select_dtypes(include=[np.number])
        if not numeric_df.empty:
            html_content += numeric_df.describe().to_html()
        else:
            html_content += "<p>No numerical columns found.</p>"
        
        html_content += """
            </div>
        </body>
        </html>
        """
        
        return html_content
    
    def generate_quick_summary(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Generate quick statistical summary"""
        summary = {}
        
        # Basic info
        summary['shape'] = df.shape
        summary['total_missing'] = df.isnull().sum().sum()
        summary['duplicates'] = df.duplicated().sum()
        
        # Column types
        summary['numerical_columns'] = df.select_dtypes(include=[np.number]).columns.tolist()
        summary['categorical_columns'] = df.select_dtypes(include=['object']).columns.tolist()
        summary['datetime_columns'] = df.select_dtypes(include=['datetime']).columns.tolist()
        
        # Correlation matrix for numerical columns
        numeric_df = df.select_dtypes(include=[np.number])
        if len(numeric_df.columns) > 1:
            summary['correlation_matrix'] = numeric_df.corr()
        else:
            summary['correlation_matrix'] = None
        
        # Missing values by column
        summary['missing_by_column'] = df.isnull().sum().to_dict()
        
        # Unique values by column
        summary['unique_by_column'] = df.nunique().to_dict()
        
        return summary
    
    def create_correlation_heatmap(self, correlation_matrix: pd.DataFrame) -> go.Figure:
        """Create interactive correlation heatmap"""
        fig = go.Figure(data=go.Heatmap(
            z=correlation_matrix.values,
            x=correlation_matrix.columns,
            y=correlation_matrix.columns,
            colorscale='RdBu',
            zmid=0,
            text=correlation_matrix.round(3).values,
            texttemplate="%{text}",
            textfont={"size": 10},
            hoverongaps=False
        ))
        
        fig.update_layout(
            title="Feature Correlation Matrix",
            xaxis_title="Features",
            yaxis_title="Features",
            width=800,
            height=600
        )
        
        return fig
    
    def create_distribution_plots(self, df: pd.DataFrame, columns: list) -> go.Figure:
        """Create distribution plots for selected columns"""
        n_cols = min(3, len(columns))
        n_rows = (len(columns) + n_cols - 1) // n_cols
        
        fig = make_subplots(
            rows=n_rows,
            cols=n_cols,
            subplot_titles=columns,
            vertical_spacing=0.1
        )
        
        for i, col in enumerate(columns):
            row = i // n_cols + 1
            col_pos = i % n_cols + 1
            
            if df[col].dtype in ['int64', 'float64']:
                # Histogram for numerical columns
                fig.add_trace(
                    go.Histogram(x=df[col], name=col, showlegend=False),
                    row=row, col=col_pos
                )
            else:
                # Bar chart for categorical columns
                value_counts = df[col].value_counts().head(10)
                fig.add_trace(
                    go.Bar(x=value_counts.index, y=value_counts.values, name=col, showlegend=False),
                    row=row, col=col_pos
                )
        
        fig.update_layout(
            title="Distribution Analysis",
            height=300 * n_rows,
            showlegend=False
        )
        
        return fig
    
    def create_missing_values_plot(self, df: pd.DataFrame) -> go.Figure:
        """Create missing values visualization"""
        missing_data = df.isnull().sum()
        missing_data = missing_data[missing_data > 0].sort_values(ascending=False)
        
        if missing_data.empty:
            # No missing values
            fig = go.Figure()
            fig.add_annotation(
                text="No Missing Values Found! üéâ",
                xref="paper", yref="paper",
                x=0.5, y=0.5,
                showarrow=False,
                font=dict(size=20, color="green")
            )
            fig.update_layout(title="Missing Values Analysis")
            return fig
        
        fig = go.Figure(data=[
            go.Bar(
                x=missing_data.index,
                y=missing_data.values,
                marker_color='red',
                opacity=0.7
            )
        ])
        
        fig.update_layout(
            title="Missing Values by Column",
            xaxis_title="Columns",
            yaxis_title="Missing Count",
            xaxis_tickangle=-45
        )
        
        return fig
    
    def create_data_types_plot(self, df: pd.DataFrame) -> go.Figure:
        """Create data types visualization"""
        dtype_counts = df.dtypes.value_counts()
        
        fig = go.Figure(data=[
            go.Pie(
                labels=dtype_counts.index.astype(str),
                values=dtype_counts.values,
                hole=0.3,
                marker_colors=self.color_palette
            )
        ])
        
        fig.update_layout(
            title="Data Types Distribution",
            annotations=[dict(text='Data<br>Types', x=0.5, y=0.5, font_size=16, showarrow=False)]
        )
        
        return fig
    
    def render_eda_dashboard(self, df: pd.DataFrame) -> None:
        """Render complete EDA dashboard"""
        st.subheader("üìä Exploratory Data Analysis Dashboard")
        
        # Basic metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total Rows", f"{df.shape[0]:,}")
        with col2:
            st.metric("Total Columns", f"{df.shape[1]:,}")
        with col3:
            st.metric("Missing Values", f"{df.isnull().sum().sum():,}")
        with col4:
            st.metric("Duplicates", f"{df.duplicated().sum():,}")
        
        # Data types visualization
        st.subheader("üìã Data Types")
        col1, col2 = st.columns(2)
        
        with col1:
            fig_dtypes = self.create_data_types_plot(df)
            st.plotly_chart(fig_dtypes, use_container_width=True)
        
        with col2:
            fig_missing = self.create_missing_values_plot(df)
            st.plotly_chart(fig_missing, use_container_width=True)
        
        # Correlation analysis
        numeric_df = df.select_dtypes(include=[np.number])
        if len(numeric_df.columns) > 1:
            st.subheader("üîó Correlation Analysis")
            fig_corr = self.create_correlation_heatmap(numeric_df.corr())
            st.plotly_chart(fig_corr, use_container_width=True)
        
        # Distribution analysis
        st.subheader("üìà Distribution Analysis")
        selected_columns = st.multiselect(
            "Select columns to analyze:",
            df.columns.tolist(),
            default=df.columns.tolist()[:6]  # Default to first 6 columns
        )
        
        if selected_columns:
            fig_dist = self.create_distribution_plots(df, selected_columns)
            st.plotly_chart(fig_dist, use_container_width=True)

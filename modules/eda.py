""""
Exploratory Data Analysis (EDA) Module for MatrixLab AI Studio
Provides automated reports, visuals, and interactive dashboard using Streamlit + Plotly
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from typing import Optional, Dict, Any
import warnings
warnings.filterwarnings('ignore')


class EDAGenerator:
    """Handles automated EDA report generation and visualizations"""

    def __init__(self):
        self.color_palette = px.colors.qualitative.Set3

    # ====================================================
    # 1. Full EDA REPORT (HTML) - With ydata-profiling fallback
    # ====================================================
    def generate_profile_report(self, df: pd.DataFrame) -> str:
        """Generate comprehensive EDA report using ydata-profiling (HTML format)"""
        try:
            from ydata_profiling import ProfileReport

            profile = ProfileReport(
                df,
                title="MatrixLab AI Studio - EDA Report",
                explorative=True,
                dark_mode=False
            )
            return profile.to_html()
        except Exception:
            return self._generate_manual_report(df)

    # ====================================================
    # 2. Manual HTML Report (if profiling not available)
    # ====================================================
    def _generate_manual_report(self, df: pd.DataFrame) -> str:
        """Generate manual EDA report as HTML"""
        html_content = f"""
        <html>
        <head>
            <title>MatrixLab AI Studio - EDA Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #4F46E5; color: white; padding: 20px; text-align: center; }}
                .section {{ margin: 20px 0; padding: 15px; border-left: 4px solid #4F46E5; }}
                .metric {{ display: inline-block; margin: 10px; padding: 10px; background: #F3F4F6; border-radius: 5px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #F3F4F6; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä EDA Report</h1>
                <p>Generated by MatrixLab AI Studio</p>
            </div>

            <div class="section">
                <h2>üìã Dataset Overview</h2>
                <div class="metric"><strong>Rows:</strong> {df.shape[0]:,}</div>
                <div class="metric"><strong>Columns:</strong> {df.shape[1]:,}</div>
                <div class="metric"><strong>Missing Values:</strong> {df.isnull().sum().sum():,}</div>
                <div class="metric"><strong>Duplicates:</strong> {df.duplicated().sum():,}</div>
            </div>

            <div class="section">
                <h2>üîç Column Details</h2>
                <table>
                    <tr>
                        <th>Column</th>
                        <th>Data Type</th>
                        <th>Non-Null Count</th>
                        <th>Unique Values</th>
                        <th>Missing %</th>
                    </tr>
        """
        for col in df.columns:
            missing_pct = (df[col].isnull().sum() / len(df)) * 100
            html_content += f"""
                    <tr>
                        <td>{col}</td>
                        <td>{df[col].dtype}</td>
                        <td>{df[col].count():,}</td>
                        <td>{df[col].nunique():,}</td>
                        <td>{missing_pct:.1f}%</td>
                    </tr>
            """

        html_content += """
                </table>
            </div>

            <div class="section">
                <h2>üìà Numerical Summary</h2>
                <p>Statistical summary for numerical columns:</p>
        """

        numeric_df = df.select_dtypes(include=[np.number])
        if not numeric_df.empty:
            html_content += numeric_df.describe().to_html()
        else:
            html_content += "<p>No numerical columns found.</p>"

        html_content += """
            </div>
        </body>
        </html>
        """
        return html_content

    # ====================================================
    # 3. Quick Summary for Fast Insights
    # ====================================================
    def generate_quick_summary(self, df: pd.DataFrame) -> Dict[str, Any]:
        summary = {
            "shape": df.shape,
            "total_missing": df.isnull().sum().sum(),
            "duplicates": df.duplicated().sum(),
            "numerical_columns": df.select_dtypes(include=[np.number]).columns.tolist(),
            "categorical_columns": df.select_dtypes(include=["object"]).columns.tolist(),
            "datetime_columns": df.select_dtypes(include=["datetime"]).columns.tolist(),
            "missing_by_column": df.isnull().sum().to_dict(),
            "unique_by_column": df.nunique().to_dict(),
        }

        numeric_df = df.select_dtypes(include=[np.number])
        summary["correlation_matrix"] = numeric_df.corr() if len(numeric_df.columns) > 1 else None

        return summary

    # ====================================================
    # 4. Visualizations (Plotly)
    # ====================================================
    def create_correlation_heatmap(self, correlation_matrix: pd.DataFrame) -> go.Figure:
        fig = go.Figure(data=go.Heatmap(
            z=correlation_matrix.values,
            x=correlation_matrix.columns,
            y=correlation_matrix.columns,
            colorscale="RdBu",
            zmid=0,
            text=correlation_matrix.round(2).values,
            texttemplate="%{text}"
        ))

        fig.update_layout(
            title="üîó Correlation Matrix",
            width=800,
            height=600
        )
        return fig

    def create_distribution_plots(self, df: pd.DataFrame, columns: list) -> go.Figure:
        n_cols = min(3, len(columns))
        n_rows = (len(columns) + n_cols - 1) // n_cols

        fig = make_subplots(rows=n_rows, cols=n_cols, subplot_titles=columns)

        for i, col in enumerate(columns):
            r, c = i // n_cols + 1, i % n_cols + 1

            if df[col].dtype in ["int64", "float64"]:
                fig.add_trace(go.Histogram(x=df[col], nbinsx=30, showlegend=False), r, c)
            else:
                counts = df[col].value_counts().head(10)
                fig.add_trace(go.Bar(x=counts.index, y=counts.values, showlegend=False), r, c)

        fig.update_layout(title="üìà Distribution Analysis", height=300 * n_rows)
        return fig

    def create_missing_values_plot(self, df: pd.DataFrame) -> go.Figure:
        missing_data = df.isnull().sum().sort_values(ascending=False)
        missing_data = missing_data[missing_data > 0]

        if missing_data.empty:
            fig = go.Figure()
            fig.add_annotation(text="‚úÖ No Missing Values!", x=0.5, y=0.5, showarrow=False)
            return fig

        fig = go.Figure(go.Bar(x=missing_data.index, y=missing_data.values))
        fig.update_layout(title="üìâ Missing Values by Column", xaxis_tickangle=-45)
        return fig

    def create_data_types_plot(self, df: pd.DataFrame) -> go.Figure:
        dtype_counts = df.dtypes.value_counts()
        fig = go.Figure(go.Pie(labels=dtype_counts.index.astype(str), values=dtype_counts.values, hole=0.3))
        fig.update_layout(title="üß¨ Data Types Distribution")
        return fig

    # ====================================================
    # 5. Render Complete EDA Dashboard in Streamlit
    # ====================================================
    def render_eda_dashboard(self, df: pd.DataFrame) -> None:
        st.subheader("üìä EDA Dashboard")

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Rows", f"{df.shape[0]:,}")
        col2.metric("Columns", f"{df.shape[1]:,}")
        col3.metric("Missing", f"{df.isnull().sum().sum():,}")
        col4.metric("Duplicates", f"{df.duplicated().sum():,}")

        # Data Type + Missing Values
        st.subheader("üìã Data Types & Missing Values")
        left, right = st.columns(2)
        left.plotly_chart(self.create_data_types_plot(df), use_container_width=True)
        right.plotly_chart(self.create_missing_values_plot(df), use_container_width=True)

        # Correlation Analysis
        num_df = df.select_dtypes(include=[np.number])
        if len(num_df.columns) > 1:
            st.subheader("üîó Correlation Heatmap")
            st.plotly_chart(self.create_correlation_heatmap(num_df.corr()), use_container_width=True)

        # Distribution
        st.subheader("üìà Distribution Analysis")
        selected_cols = st.multiselect("Select columns to visualize", df.columns.tolist(), default=df.columns.tolist()[:6])
        if selected_cols:
            st.plotly_chart(self.create_distribution_plots(df, selected_cols), use_container_width=True)
